name: Build and Release Caddy

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: ubuntu-latest
            goos: linux
            goarch: arm
            goarm: 7
          - os: ubuntu-latest
            goos: linux
            goarch: ppc64le
          - os: ubuntu-latest
            goos: linux
            goarch: s390x
          # macOS
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
          # Windows
          - os: windows-latest
            goos: windows
            goarch: amd64
          - os: windows-latest
            goos: windows
            goarch: arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Install xcaddy
        run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest
        shell: bash

      - name: Build Caddy with Cloudflare plugin (no extensions)
        run: |
          mkdir -p build
          if [ "${{ matrix.goarch }}" = "arm" ]; then
            xcaddy build \
              --with github.com/caddy-dns/cloudflare \
              --output build/caddy-${{ matrix.goos }}-armv${{ matrix.goarm }}
          else
            xcaddy build \
              --with github.com/caddy-dns/cloudflare \
              --output build/caddy-${{ matrix.goos }}-${{ matrix.goarch }}
          fi
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm || '' }}
        shell: bash

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: caddy-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
